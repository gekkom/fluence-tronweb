/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.1-249
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface TronWebDef {
    currentProvider: (callParams: CallParams<null>) => string | Promise<string>;
    currentProviders: (callParams: CallParams<null>) => string | Promise<string>;
    fromAscii: (input: string, padding: string, callParams: CallParams<'input' | 'padding'>) => string | Promise<string>;
    fromDecimal: (input: number, callParams: CallParams<'input'>) => string | Promise<string>;
    fromSun: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    fromUtf8: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    fullnodeSatisfies: (version: string, callParams: CallParams<'version'>) => boolean | Promise<boolean>;
    getEventByTransactionID: (transactionID: string, callParams: CallParams<'transactionID'>) => string | Promise<string>;
    getFullnodeVersion: (callParams: CallParams<null>) => void | Promise<void>;
    isAddress: (address: string, callParams: CallParams<'address'>) => boolean | Promise<boolean>;
    isValidProvider: (provider: string, callParams: CallParams<'provider'>) => boolean | Promise<boolean>;
    setAddress: (address: string, callParams: CallParams<'address'>) => void | Promise<void>;
    setDefaultBlock: (blockID: number, callParams: CallParams<'blockID'>) => void | Promise<void>;
    setEventHeader: (headers: string[], callParams: CallParams<'headers'>) => void | Promise<void>;
    setEventServer: (eventServer: string, callParams: CallParams<'eventServer'>) => void | Promise<void>;
    setFullNode: (fullnode: string, callParams: CallParams<'fullnode'>) => void | Promise<void>;
    setFullNodeHeader: (headers: string[], callParams: CallParams<'headers'>) => void | Promise<void>;
    setHeader: (headers: string[], callParams: CallParams<'headers'>) => void | Promise<void>;
    setPrivateKey: (privateKey: string, callParams: CallParams<'privateKey'>) => void | Promise<void>;
    setSolidityNode: (solidityNode: string, callParams: CallParams<'solidityNode'>) => void | Promise<void>;
    sha3: (input: string, prefix: boolean, callParams: CallParams<'input' | 'prefix'>) => string | Promise<string>;
    toAscii: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    toBigNumber: (input: number, callParams: CallParams<'input'>) => number | Promise<number>;
    toDecimal: (input: string, callParams: CallParams<'input'>) => number | Promise<number>;
    toHex: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    toSun: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    toUtf8: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
}
export function registerTronWeb(service: TronWebDef): void;
export function registerTronWeb(serviceId: string, service: TronWebDef): void;
export function registerTronWeb(peer: FluencePeer, service: TronWebDef): void;
export function registerTronWeb(peer: FluencePeer, serviceId: string, service: TronWebDef): void;
       

export function registerTronWeb(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "TronWeb",
    "functions" : [
        {
            "functionName" : "currentProvider",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "currentProviders",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "fromAscii",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "padding",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "fromDecimal",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "fromSun",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "fromUtf8",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "fullnodeSatisfies",
            "argDefs" : [
                {
                    "name" : "version",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getEventByTransactionID",
            "argDefs" : [
                {
                    "name" : "transactionID",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getFullnodeVersion",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "isAddress",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "isValidProvider",
            "argDefs" : [
                {
                    "name" : "provider",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "setAddress",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setDefaultBlock",
            "argDefs" : [
                {
                    "name" : "blockID",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setEventHeader",
            "argDefs" : [
                {
                    "name" : "headers",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setEventServer",
            "argDefs" : [
                {
                    "name" : "eventServer",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setFullNode",
            "argDefs" : [
                {
                    "name" : "fullnode",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setFullNodeHeader",
            "argDefs" : [
                {
                    "name" : "headers",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setHeader",
            "argDefs" : [
                {
                    "name" : "headers",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setPrivateKey",
            "argDefs" : [
                {
                    "name" : "privateKey",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "setSolidityNode",
            "argDefs" : [
                {
                    "name" : "solidityNode",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "sha3",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "prefix",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toAscii",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toBigNumber",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toDecimal",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toHex",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toSun",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toUtf8",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions

